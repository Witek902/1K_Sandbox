/* File generated with Shader Minifier 1.1.4
 * http://www.ctrl-alt-test.fr
 */
#ifndef SHADER_CODE_H_
# define SHADER_CODE_H_

const char *shader_glsl =
 "uint v;"
 "float s()"
 "{"
   "return v^=v<<1,v^=v>>3,v^=v<<10,float(v%1000)/1000;"
 "}"
 "void main()"
 "{"
   "vec3 i,c,f,z,y=0,x,e,d,n[10];"
   "vec4 r=vec4(-101,101,100,0),a=gl_FragCoord,u[10];"
   "v=uint(a.y)+(uint(a.x)<<10);"
   "u[0]=r.ywwz;"
   "u[1]=r.xwwz;"
   "u[2]=r.wywz;"
   "u[3]=r.wxwz;"
   "u[4]=r.wwyz;"
   "u[5]=r.wwxz;"
   "u[6]=vec4(.6,-.7,.2,.3);"
   "u[7]=vec4(-.3,-.6,.2,.4);"
   "u[8]=vec4(-.6,-.8,-.7,.2);"
   "u[9]=vec4(.5,-.8,-.8,.2);"
   "n[0]=vec3(.8,.1,.1);"
   "n[1]=n[0].zzx;"
   "n[4]=n[0].zxz;"
   "n[2]=n[3]=.5;"
   "for(int m=0;m<200;m++)"
     "{"
       "float o,g,t,w=6.28*s(),l=s();"
       "e=1;"
       "d=vec3(0,-.4,-2.5);"
       "f=d+2*vec3((a.xy+2*vec2(s(),s()))/1080-vec2(.889,.5),1.2+l*.03);"
       "d.xy+=.1*sqrt(s())*vec2(cos(w),sin(w));"
       "x=normalize(f-d);"
       "for(int q=0;q<10;q++)"
         "{"
           "o=10;"
           "for(int b=0;b<10;b++)"
             "{"
               "w=u[b].w;"
               "i=d-u[b].xyz;"
               "g=dot(i,x);"
               "t=g*g-dot(i,i)+w*w;"
               "if(t>0)"
                 "{"
                   "g=-g-sqrt(t);"
                   "if(g>0)"
                     "if(o>g)"
                       "o=g,f=d+x*o,c=(f-u[b].xyz)/w,z=b>4?vec3(.9):n[b];"
                 "}"
             "}"
           "d=f+c/500;"
           "if(abs(f.x)<.3)"
             "if(abs(f.z)<.3)"
               "if(f.y>.9)"
                 "t=3*l-1.5,y+=80*e*clamp(vec3(-t,1-abs(t),t),0,1),z=0;"
           "e*=z;"
           "if(z==.9)"
             "x=reflect(x,c);"
           "else"
             " t=s(),w=6.28*s(),i=normalize(cross(c,x)),x=sqrt(t)*(cos(w)*cross(c,i)+sin(w)*i)+c*sqrt(1-t);"
         "}"
     "}"
   "gl_FragColor=vec4(sqrt(1-exp(-y/100)),1);"
 "}";

#endif // SHADER_CODE_H_
